//Rod cutting 


#include <iostream>
#include <vector>
using namespace std;
int rodCutting(int price[], int n) {
    vector<int> dp(n+1, 0);
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= i; j++) {
            dp[i] = max(dp[i], price[j-1] + dp[i-j]); 
        }
    }
    return dp[n];
}
int main() {
    int price[] = {1, 5, 8, 9, 10, 17, 17, 20};
    int n = sizeof(price)/sizeof(price[0]);
    cout << "Maximum value: " << rodCutting(price, n) << endl;
    return 0;
}


//0 1 knapSack

#include<bits/stdc++.h>
using namespace std;
int max(int a, int b) { return (a > b) ? a : b; } 
int knapSack(int W, int wt[], int val[], int n) 
{
   int i, w;
   int K[n+1][W+1];
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
   return K[n][W]; 
}
int main()
{
    int val[] = {60, 100, 120}; 
    int wt[] = {10, 20, 30}; 
    int  W = 50; 
    int n = sizeof(val)/sizeof(val[0]); 
    cout << "Maximum value that can be obtained: " << knapSack(W, wt, val, n) << endl;
    return 0;
}


//maxSubArraySum


#include <bits/stdc++.h>
using namespace std;
int max(int a, int b) { return (a > b) ? a : b; } 
int maxCrossingSum(int arr[], int l, int m, int h)
{
    int sum = 0;
    int left_sum = INT_MIN;
    for (int i = m; i >= l; i--)
    {
        sum = sum + arr[i];
        if (sum > left_sum)
            left_sum = sum;
    }
    sum = 0;
    int right_sum = INT_MIN;
    for (int i = m + 1; i <= h; i++)
    {
        sum = sum + arr[i];
        if (sum > right_sum)
            right_sum = sum;
    }
    return left_sum + right_sum;
}
int maxSubArraySum(int arr[], int l, int h)
{
    if (l == h)
        return arr[l];
    int m = (l + h) / 2;
    return max(maxSubArraySum(arr, l, m),
               max(maxSubArraySum(arr, m + 1, h),
                   maxCrossingSum(arr, l, m, h)));
}
int main()
{
    int arr[] = { -2, -5, 6, -2, -3, 1, 5, -6 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_sum = maxSubArraySum(arr, 0, n - 1);
    cout << "Maximum contiguous sum is " << max_sum;
    return 0;
}




//matrix chain with order


#include <bits/stdc++.h>
using namespace std;
int min(int x, int y)
{
    return (x < y) ? x : y;
}
int matrixChainOrder(int p[], int n, vector<vector<int>>& order)
{
    int m[n][n];
    for (int i = 1; i < n; i++)
        m[i][i] = 0;
    for (int L = 2; L < n; L++)
    {
        for (int i = 1; i < n - L + 1; i++)
        {
            int j = i + L - 1;
            m[i][j] = INT_MAX;

            for (int k = i; k <= j - 1; k++)
            {
                int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < m[i][j])
                {
                    m[i][j] = q;
                    order[i][j] = k;
                }
            }
        }
    }
    return m[1][n - 1];
}
void printOrder(vector<vector<int>> order, int i, int j)
{
    if (i == j)
        cout << "A" << i;
    else
    {
        cout << "(";
        printOrder(order, i, order[i][j]);
        printOrder(order, order[i][j] + 1, j);
        cout << ")";
    }
}
int main()
{
    int p[] = {10, 20, 30, 40, 30}; 
    int n = sizeof(p) / sizeof(p[0]);
    vector<vector<int>> order(n, vector<int>(n, 0));
    cout << "Minimum number of multiplications: " << matrixChainOrder(p, n, order) << endl;
    cout << "Order of matrix multiplication: ";
    printOrder(order, 1, n - 1);
    cout << endl;
    return 0;
}


//matrix chain multiplications

#include <bits/stdc++.h>
using namespace std;
int MatrixChainOrder(int p[], int i, int j)
{
	if (i == j)
		return 0;
	int k;
	int mini = INT_MAX;
	int count;
	for (k = i; k < j; k++)
	{
		count = MatrixChainOrder(p, i, k)
				+ MatrixChainOrder(p, k + 1, j)
				+ p[i - 1] * p[k] * p[j];

		mini = min(count, mini);
	}
	return mini;
}
int main()
{
	int arr[] = { 10, 20, 30, 40, 30 };
	int N = sizeof(arr) / sizeof(arr[0]);
	cout << "Minimum number of multiplications is "
		<< MatrixChainOrder(arr, 1, N - 1);
	return 0;
}


//Longest common subsequence

#include <bits/stdc++.h>
using namespace std;
int lcs(string X, string Y, int m, int n)
{
	if (m == 0 || n == 0)
		return 0;
	if (X[m - 1] == Y[n - 1])
		return 1 + lcs(X, Y, m - 1, n - 1);
	else
		return max(lcs(X, Y, m, n - 1),
				lcs(X, Y, m - 1, n));
}
int main()
{
	string S1 = "AGGTAB";
	string S2 = "GXTXAYB";
	int m = S1.size();
	int n = S2.size();
	cout << "Length of LCS is " << lcs(S1, S2, m, n);
	return 0;
}


//N queen problem

#include <bits/stdc++.h>
using namespace std;
vector<vector<string> > answer;
void print_board()
{
	for (auto& str : answer[1]) {
		for (auto& letter : str)
			cout << letter << " ";
		cout << endl;
	}
	return;
}
int safe(int row, int col, vector<string>& board)
{
	for (int i = 0; i < board.size(); i++) {
		if (board[i][col] == 'Q')
			return false;
	}
	int i = row, j = col;
	while (i >= 0 && j >= 0)
		if (board[i--][j--] == 'Q')
			return false;
	i = row, j = col;
	while (i >= 0 && j < board.size())
		if (board[i--][j++] == 'Q')
			return false;
	return true;
}
void rec(vector<string> board, int row)
{
	if (row == board.size()) {
		answer.push_back(board);
		return;
	}
	for (int i = 0; i < board.size(); i++) {
		if (safe(row, i, board)) {
			board[row][i] = 'Q';
			rec(board, row + 1);
			board[row][i] = '.';
		}
	}
	return;
}
vector<vector<string> > solveNQueens(int n)
{
	string s;
	for (int i = 0; i < n; i++)
		s += '.';
	vector<string> board(n, s);
	rec(board, 0);
	return answer;
}
int main()
{
	clock_t start, end;
	start = clock();
	cout << solveNQueens(4).size() << endl;
	cout << "Out of " << answer.size()
		<< " solutions one is following" << endl;
	print_board();
	return 0;
}


//subset sum

#include <iostream>
#include <vector>
using namespace std;
int maxSubarraySum(vector<int>& nums) {
    int n = nums.size();
    vector<int> dp(n);
    dp[0] = nums[0];
    int max_sum = dp[0];
    for (int i = 1; i < n; i++) {
        dp[i] = max(nums[i], dp[i-1] + nums[i]);
        max_sum = max(max_sum, dp[i]);
    }
    return max_sum;
}
int main() {
    vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    int max_sum = maxSubarraySum(nums);
    cout << "Maximum sum of a contiguous subarray: " << max_sum << endl;
    return 0;
}



//subset sum with subset

#include <iostream>
#include <vector>
using namespace std;
int maxSubarraySum(vector<int>& nums) {
    int n = nums.size();
    vector<int> dp(n); 
    dp[0] = nums[0];
    int max_sum = dp[0];
    int start = 0, end = 0; 
    for (int i = 1; i < n; i++) {
        if (nums[i] > dp[i-1] + nums[i]) { 
            dp[i] = nums[i];
            start = i;
        }
        else {
            dp[i] = dp[i-1] + nums[i];
        }
        if (dp[i] > max_sum) {
            max_sum = dp[i];
            end = i; 
        }
    }
    cout << "Subset with maximum sum: ";
    for (int i = start; i <= end; i++) {
        cout << nums[i] << " ";
    }
    cout << endl;
    return max_sum;
}
int main() {
    vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    int max_sum = maxSubarraySum(nums);
    cout << "Maximum sum of a contiguous subarray: " << max_sum << endl;
    return 0;
}


//job selection problem

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
struct Job {
    int start, finish, profit;
};
bool jobComparision(Job j1, Job j2) {
    return j1.finish < j2.finish;
}
int jobSelection(vector<Job>& jobs) {
    int n = jobs.size();
    sort(jobs.begin(), jobs.end(), jobComparision);
    vector<int> dp(n); 
    dp[0] = jobs[0].profit;
    for (int i = 1; i < n; i++) {
        int prev = -1; 
        for (int j = i-1; j >= 0; j--) {
            if (jobs[j].finish <= jobs[i].start) {
                prev = j;
                break;
            }
        }
        int incl = jobs[i].profit;
        if (prev != -1) {
            incl += dp[prev];
        }
        dp[i] = max(incl, dp[i-1]);
    }
    return dp[n-1];
}
int main() {
    vector<Job> jobs = {{1, 2, 50}, {3, 5, 20}, {6, 19, 100}, {2, 100, 200}};
    int max_profit = jobSelection(jobs);
    cout << "Maximum profit that can be earned: " << max_profit << endl;
    return 0;
}

//Naive string algorithm


#include <bits/stdc++.h>
using namespace std;
void search(char* pat, char* txt)
{
	int M = strlen(pat);
	int N = strlen(txt);
	for (int i = 0; i <= N - M; i++) {
		int j;
		for (j = 0; j < M; j++)
			if (txt[i + j] != pat[j])
				break;
		if (j== M) 
			cout << "Pattern found at index " << i << endl;
	}
}
int main()
{
	char txt[] = "AABAACAADAABAAABAA";
	char pat[] = "AABA";
	search(pat, txt);
	return 0;
}


//kmp string matching

#include <bits/stdc++.h>
void computeLPSArray(char* pat, int M, int* lps);
void KMPSearch(char* pat, char* txt)
{
	int M = strlen(pat);
	int N = strlen(txt);
	int lps[M];
	computeLPSArray(pat, M, lps);
	int i = 0;
	int j = 0; 
	while ((N - i) >= (M - j)) {
		if (pat[j] == txt[i]) {
			j++;
			i++;
		}
		if (j == M) {
			printf("Found pattern at index %d ", i - j);
			j = lps[j - 1];
		}
		else if (i < N && pat[j] != txt[i]) {
			if (j != 0)
				j = lps[j - 1];
			else
				i = i + 1;
		}
	}
}
void computeLPSArray(char* pat, int M, int* lps)
{
	int len = 0;
	lps[0] = 0; 
	int i = 1;
	while (i < M) {
		if (pat[i] == pat[len]) {
			len++;
			lps[i] = len;
			i++;
		}
		else 
		{
			if (len != 0) {
				len = lps[len - 1];
			}
			else
			{
				lps[i] = 0;
				i++;
			}
		}
	}
}
int main()
{
	char txt[] = "ABABDABACDABABCABAB";
	char pat[] = "ABABCABAB";
	KMPSearch(pat, txt);
	return 0;
}


//karp string matching


#include <bits/stdc++.h>
using namespace std;
#define d 256
void search(char pat[], char txt[], int q)
{
	int M = strlen(pat);
	int N = strlen(txt);
	int i, j;
	int p = 0; 
	int t = 0; 
	int h = 1;
	for (i = 0; i < M - 1; i++)
		h = (h * d) % q;
	for (i = 0; i < M; i++) {
		p = (d * p + pat[i]) % q;
		t = (d * t + txt[i]) % q;
	}
	for (i = 0; i <= N - M; i++) {
		if (p == t) {
			for (j = 0; j < M; j++) {
				if (txt[i + j] != pat[j]) {
					break;
				}
			}
			if (j == M)
				cout << "Pattern found at index " << i
					<< endl;
		}
		if (i < N - M) {
			t = (d * (t - txt[i] * h) + txt[i + M]) % q;
			if (t < 0)
				t = (t + q);
		}
	}
}
int main()
{
	char txt[] = "GEEKS FOR GEEKS";
	char pat[] = "GEEK";
	int q = INT_MAX;
	search(pat, txt, q);
	return 0;
}

//Bellman ford shortest path


#include <iostream>
#include <vector>
#include <limits.h>
using namespace std;
struct Edge {
    int src, dest, weight;
};
void bellmanFord(vector<Edge>& edges, int V, int E, int src) {
    vector<int> dist(V, INT_MAX); 
    dist[src] = 0;
    for (int i = 1; i <= V-1; i++) { 
        for (int j = 0; j < E; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            int w = edges[j].weight;
            if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
            }
        }
    }
    for (int j = 0; j < E; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int w = edges[j].weight;
        if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
            cout << "Graph contains negative cycle" << endl;
            return;
        }
    }
    cout << "Shortest distances from source " << src << ":\n";
    for (int i = 0; i < V; i++) {
        cout << i << ": " << dist[i] << endl;
    }
}

int main() {
    int V = 5;
    int E = 8; 
    vector<Edge> edges = {{0, 1, -1}, {0, 2, 4}, {1, 2, 3}, {1, 3, 2}, {1, 4, 2}, {3, 2, 5}, {3, 1, 1}, {4, 3, -3}};
    int src = 0; 
    bellmanFord(edges, V, E, src);
    return 0;
}


//Floyd warshall all pair shortest path

#include <bits/stdc++.h>
using namespace std;
#define V 4
#define INF 99999
void printSolution(int dist[][V]);
void floydWarshall(int dist[][V])
{
    int i, j, k;
	for (k = 0; k < V; k++) {
		for (i = 0; i < V; i++) {
			for (j = 0; j < V; j++) {
				if (dist[i][j] > (dist[i][k] + dist[k][j])
					&& (dist[k][j] != INF
						&& dist[i][k] != INF))
					dist[i][j] = dist[i][k] + dist[k][j];
			}
		}
	}
	printSolution(dist);
}
void printSolution(int dist[][V])
{
	cout << "The following matrix shows the shortest "
			"distances"
			" between every pair of vertices \n";
	for (int i = 0; i < V; i++) {
		for (int j = 0; j < V; j++) {
			if (dist[i][j] == INF)
				cout << "INF"
					<< " ";
			else
				cout << dist[i][j] << " ";
		}
		cout << endl;
	}
}
int main()
{
	/* Let us create the following weighted graph
			10
	(0)------->(3)
		|	 /|\
	5 |	 |
		|	 | 1
	\|/	 |
	(1)------->(2)
			3	 */
	int graph[V][V] = { { 0, 5, INF, 10 },
						{ INF, 0, 3, INF },
						{ INF, INF, 0, 1 },
						{ INF, INF, INF, 0 } };
	floydWarshall(graph);
	return 0;
}


//Ford Fulkerson sink flow

#include <iostream>
#include <limits.h>
#include <queue>
#include <string.h>
using namespace std;
#define V 6
bool bfs(int rGraph[V][V], int s, int t, int parent[])
{
	bool visited[V];
	memset(visited, 0, sizeof(visited));
	queue<int> q;
	q.push(s);
	visited[s] = true;
	parent[s] = -1;
	while (!q.empty()) {
		int u = q.front();
		q.pop();
		for (int v = 0; v < V; v++) {
			if (visited[v] == false && rGraph[u][v] > 0) {
				if (v == t) {
					parent[v] = u;
					return true;
				}
				q.push(v);
				parent[v] = u;
				visited[v] = true;
			}
		}
	}
	return false;
}
int fordFulkerson(int graph[V][V], int s, int t)
{
	int u, v;
	int rGraph[V][V]; 
	for (u = 0; u < V; u++)
		for (v = 0; v < V; v++)
			rGraph[u][v] = graph[u][v];
	int parent[V]; 
	int max_flow = 0; 
	while (bfs(rGraph, s, t, parent)) {
		int path_flow = INT_MAX;
		for (v = t; v != s; v = parent[v]) {
			u = parent[v];
			path_flow = min(path_flow, rGraph[u][v]);
		}
		for (v = t; v != s; v = parent[v]) {
			u = parent[v];
			rGraph[u][v] -= path_flow;
			rGraph[v][u] += path_flow;
		}
		max_flow += path_flow;
	}
	return max_flow;
}
int main()
{
    int graph[V][V]
		= { { 0, 16, 13, 0, 0, 0 }, { 0, 0, 10, 12, 0, 0 },
			{ 0, 4, 0, 0, 14, 0 }, { 0, 0, 9, 0, 0, 20 },
			{ 0, 0, 0, 7, 0, 4 }, { 0, 0, 0, 0, 0, 0 } };
	cout << "The maximum possible flow is "
		<< fordFulkerson(graph, 0, 5);
	return 0;
}


//Edmond karp algorithm


#include <iostream>
#include <vector>
#include <queue>
#include <limits.h>
using namespace std;
#define V 6 
bool bfs(vector<vector<int>>& graph, int s, int t, vector<int>& parent) {
    vector<bool> visited(V, false);
    queue<int> q;
    q.push(s);
    visited[s] = true;
    parent[s] = -1;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int v = 0; v < V; v++) {
            if (!visited[v] && graph[u][v] > 0) {
                q.push(v);
                visited[v] = true;
                parent[v] = u;
            }
        }
    }
    return visited[t];
}
int edmondsKarp(vector<vector<int>>& graph, int s, int t) {
    vector<int> parent(V);
    int maxFlow = 0;
    while (bfs(graph, s, t, parent)) {
        int pathFlow = INT_MAX;
        for (int v = t; v != s; v = parent[v]) {
            int u = parent[v];
            pathFlow = min(pathFlow, graph[u][v]);
        }
        for (int v = t; v != s; v = parent[v]) {
            int u = parent[v];
            graph[u][v] -= pathFlow;
            graph[v][u] += pathFlow;
        }
        maxFlow += pathFlow;
    }
    return maxFlow;
}
int main() {
    vector<vector<int>> graph = {{0, 16, 13, 0, 0, 0}, {0, 0, 10, 12, 0, 0}, {0, 4, 0, 0, 14, 0}, {0, 0, 9, 0, 0, 20}, {0, 0, 0, 7, 0, 4}, {0, 0, 0, 0, 0, 0}};
    int s = 0; // source vertex
    int t = 5; // sink vertex
    int maxFlow = edmondsKarp(graph, s, t);
    cout << "Maximum flow = " << maxFlow << endl;
    return 0;
}


//Re lebel algorithm


#include <iostream>
#include <vector>
#include <queue>
#include <limits.h>
using namespace std;

struct Edge {
    int to, capacity, flow, rev;
};

class Graph {
    int V;
    vector<vector<Edge>> adj;
    vector<int> height, excess, count;
    queue<int> q;
public:
    Graph(int V) {
        this->V = V;
        adj.resize(V);
        height.resize(V);
        excess.resize(V);
        count.resize(2*V);
    }
    void addEdge(int from, int to, int capacity) {
        Edge e1 = {to, capacity, 0, (int)adj[to].size()};
        Edge e2 = {from, 0, 0, (int)adj[from].size()};
        adj[from].push_back(e1);
        adj[to].push_back(e2);
    }
    void push(int u, Edge& e) {
        int v = e.to;
        int sendFlow = min(excess[u], e.capacity - e.flow);
        if (height[u] == height[v]+1 && sendFlow > 0) {
            e.flow += sendFlow;
            adj[v][e.rev].flow -= sendFlow;
            excess[u] -= sendFlow;
            excess[v] += sendFlow;
            if (v != 0 && v != V-1 && excess[v] > 0) {
                q.push(v);
            }
        }
    }
    void relabel(int u) {
        int minHeight = INT_MAX;
        for (int i = 0; i < adj[u].size(); i++) {
            Edge& e = adj[u][i];
            if (e.capacity - e.flow > 0) {
                minHeight = min(minHeight, height[e.to]);
            }
        }
        height[u] = minHeight + 1;
    }
    void discharge(int u) {
        while (excess[u] > 0) {
            if (count[height[u]] == 0) {
                relabel(u);
                count[height[u]]++;
            } else {
                for (int i = 0; i < adj[u].size(); i++) {
                    Edge& e = adj[u][i];
                    if (e.capacity - e.flow > 0 && height[u] == height[e.to]+1) {
                        push(u, e);
                        if (excess[u] == 0) {
                            break;
                        }
                    }
                }
                if (excess[u] > 0) {
                    relabel(u);
                    count[height[u]]++;
                }
            }
        }
    }
    int maxFlow(int s, int t) {
        height[s] = V;
        excess[s] = INT_MAX;
        for (int i = 0; i < adj[s].size(); i++) {
            Edge& e = adj[s][i];
            e.flow = e.capacity;
            excess[e.to] += e.capacity;
            adj[e.to][e.rev].flow -= e.capacity;
            if (e.to != 0 && e.to != V-1) {
                q.push(e.to);
            }
        }
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            count[height[u]]--;
            discharge(u);
        }
        return excess[t];
    }
};

int main() {
    int V = 6; // number of vertices
    Graph g(V);
    g.addEdge(0, 1, 16);//src , dest , cost
    g.addEdge(0, 2, 13);
    g.addEdge(1, 2, 10);
    g.addEdge(1, 3, 12);
    g.addEdge(2, 1, 4);
    g.addEdge(2, 4, 14);
    g.addEdge(3, 2, 9);
    g.addEdge(3, 5, 20);
    g.addEdge(4, 3, 7);
    g.addEdge(4, 5, 4);
    int s = 0; // source vertex
    int t = 5; // sink vertex
    int maxFlow = g.maxFlow(s, t);
    cout << "Maximum flow = " << maxFlow << endl;
    return 0;
}


//Convex Hull algorithm


#include <iostream>
#include <stack>
#include <algorithm>
using namespace std;
struct Point {
    int x, y;
};
Point p0;
int orientation(Point p, Point q, Point r) {
    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    if (val == 0) {
        return 0;
    }
    return (val > 0) ? 1 : 2;
}
bool compare(Point p1, Point p2) {
    int o = orientation(p0, p1, p2);
    if (o == 0) {
        return (p0.y < p1.y || (p0.y == p1.y && p0.x < p1.x));
    }
    return (o == 2);
}
stack<Point> convexHull(Point points[], int n) {
    stack<Point> hull;
    int ymin = points[0].y, min = 0;
    for (int i = 1; i < n; i++) {
        int y = points[i].y;
        if ((y < ymin) || (ymin == y && points[i].x < points[min].x)) {
            ymin = points[i].y;
            min = i;
        }
    }
    swap(points[0], points[min]);
    p0 = points[0];
    sort(points+1, points+n, compare);
    hull.push(points[0]);
    hull.push(points[1]);
    for (int i = 2; i < n; i++) {
        Point top = hull.top();
        hull.pop();
        while (orientation(hull.top(), top, points[i]) != 2) {
            top = hull.top();
            hull.pop();
        }
        hull.push(top);
        hull.push(points[i]);
    }
    return hull;
}
int main() {
    Point points[] = {{0, 3}, {1, 1}, {2, 2}, {4, 4}, {0, 0}, {1, 2}, {3, 1}, {3, 3}};
    int n = sizeof(points)/sizeof(points[0]);
    stack<Point> hull = convexHull(points, n);
    cout << "Convex Hull:\n";
    while (!hull.empty()) {
        Point p = hull.top();
        cout <<"(" << p.x << ", " << p.y << ")" << endl;
        hull.pop();
    }
    return 0;
}


//Grahm scan algorithm polygon


#include <iostream>
#include <stack>
#include <stdlib.h>
using namespace std;
struct Point
{
	int x, y;
};
Point p0;
Point nextToTop(stack<Point> &S)
{
	Point p = S.top();
	S.pop();
	Point res = S.top();
	S.push(p);
	return res;
}
void swap(Point &p1, Point &p2)
{
	Point temp = p1;
	p1 = p2;
	p2 = temp;
}
int distSq(Point p1, Point p2)
{
	return (p1.x - p2.x)*(p1.x - p2.x) +
		(p1.y - p2.y)*(p1.y - p2.y);
}
int orientation(Point p, Point q, Point r)
{
	int val = (q.y - p.y) * (r.x - q.x) -
			(q.x - p.x) * (r.y - q.y);
	if (val == 0) return 0; 
	return (val > 0)? 1: 2; 
}
int compare(const void *vp1, const void *vp2)
{
Point *p1 = (Point *)vp1;
Point *p2 = (Point *)vp2;
int o = orientation(p0, *p1, *p2);
if (o == 0)
	return (distSq(p0, *p2) >= distSq(p0, *p1))? -1 : 1;
return (o == 2)? -1: 1;
}
void convexHull(Point points[], int n)
{
int ymin = points[0].y, min = 0;
for (int i = 1; i < n; i++)
{
	int y = points[i].y;
	if ((y < ymin) || (ymin == y &&
		points[i].x < points[min].x))
		ymin = points[i].y, min = i;
}
swap(points[0], points[min]);
p0 = points[0];
qsort(&points[1], n-1, sizeof(Point), compare);
int m = 1; 
for (int i=1; i<n; i++)
{
	while (i < n-1 && orientation(p0, points[i],
									points[i+1]) == 0)
		i++;
	points[m] = points[i];
	m++; 
}

if (m < 3) return;
stack<Point> S;
S.push(points[0]);
S.push(points[1]);
S.push(points[2]);
for (int i = 3; i < m; i++)
{
	while (S.size()>1 && orientation(nextToTop(S), S.top(), points[i]) != 2)
		S.pop();
	S.push(points[i]);
}
while (!S.empty())
{
	Point p = S.top();
	cout << "(" << p.x << ", " << p.y <<")" << endl;
	S.pop();
}
}
int main()
{
	Point points[] = {{0, 3}, {1, 1}, {2, 2}, {4, 4},
					{0, 0}, {1, 2}, {3, 1}, {3, 3}};
	int n = sizeof(points)/sizeof(points[0]);
	convexHull(points, n);
	return 0;
}


//jarvish polyon problem


#include <iostream>
#include <vector>
using namespace std;
struct Point {
    int x, y;
};
int orientation(Point p, Point q, Point r) {
    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    if (val == 0) {
        return 0;
    }
    return (val > 0) ? 1 : 2;
}
vector<Point> convexHull(Point points[], int n) {
    vector<Point> hull;
    int leftmost = 0;
    for (int i = 1; i < n; i++) {
        if (points[i].x < points[leftmost].x) {
            leftmost = i;
        }
    }
    int p = leftmost, q;
    do {
        hull.push_back(points[p]);
        q = (p + 1) % n;
        for (int i = 0; i < n; i++) {
            if (orientation(points[p], points[i], points[q]) == 2) {
                q = i;
            }
        }
        p = q;
    } while (p != leftmost);
    return hull;
}
int main() {
    Point points[] = {{0, 3}, {1, 1}, {2, 2}, {4, 4}, {0, 0}, {1, 2}, {3, 1}, {3, 3}};
    int n = sizeof(points)/sizeof(points[0]);
    vector<Point> hull = convexHull(points, n);
    cout << "Convex Hull:\n";
    for (int i = 0; i < hull.size(); i++) {
        cout <<"(" << hull[i].x << ", " << hull[i].y << ")" << endl;
    }
    return 0;
}

//Randomised quick sort


#include <cstdlib>
#include <time.h>
#include <iostream>
using namespace std;
int partition(int arr[], int low, int high)
{
	int pivot = arr[high];
	int i = (low - 1);
	for (int j = low; j <= high - 1; j++)
	{
		if (arr[j] <= pivot) {
			i++;
			swap(arr[i], arr[j]);
		}
	}
	swap(arr[i + 1], arr[high]);
	return (i + 1);
}
int partition_r(int arr[], int low, int high)
{
	srand(time(NULL));
	int random = low + rand() % (high - low);
	swap(arr[random], arr[high]);
	return partition(arr, low, high);
}
void quickSort(int arr[], int low, int high)
{
	if (low < high) {
		int pi = partition_r(arr, low, high);
		quickSort(arr, low, pi - 1);
		quickSort(arr, pi + 1, high);
	}
}
void printArray(int arr[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		cout<<arr[i]<<" ";
}
int main()
{
	int arr[] = { 10, 7, 8, 9, 1, 5 };
	int n = sizeof(arr) / sizeof(arr[0]);
	quickSort(arr, 0, n - 1);
	printf("Sorted array: \n");
	printArray(arr, n);
	return 0;
}



//The hiring problem


#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;
int partition(int arr[], int l, int r) {
    int x = arr[r], i = l - 1;
    for (int j = l; j <= r - 1; j++) {
        if (arr[j] <= x) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[r]);
    return i + 1;
}
int randomPartition(int arr[], int l, int r) {
    int n = r - l + 1;
    int pivot = rand() % n;
    swap(arr[l + pivot], arr[r]);
    return partition(arr, l, r);
}
int findCandidate(int arr[], int n) {
    int l = 0, r = n - 1;
    int k = n / 2;
    while (l <= r) {
        int pivotIndex = randomPartition(arr, l, r);
        if (pivotIndex == k) { 
            return arr[k];
        } else if (pivotIndex < k) { 
            l = pivotIndex + 1;
        } else {
            r = pivotIndex - 1;
        }
    }
    return 0;
}
int main() {
    int arr[] = { 12, 3, 5, 7, 4, 19, 26 };
    int n = sizeof(arr) / sizeof(arr[0]);
    srand(time(NULL)); 
    int candidate = findCandidate(arr, n);
    cout << "The best candidate is: " << candidate << endl;
    return 0;
}


//The global minimum cut problem 


#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>
#include<climits>
using namespace std;
struct Edge {
    int src, dest;
};
int findParent(int parent[], int i) {
    if (parent[i] == i) {
        return i;
    }
    return findParent(parent, parent[i]);
}
void merge(int parent[], int rank[], int x, int y) {
    int xRoot = findParent(parent, x);
    int yRoot = findParent(parent, y);
    if (rank[xRoot] < rank[yRoot]) {
        parent[xRoot] = yRoot;
    } else if (rank[xRoot] > rank[yRoot]) {
        parent[yRoot] = xRoot;
    } else {
        parent[yRoot] = xRoot;
        rank[xRoot]++;
    }
}
int kargerMinCut(vector<Edge>& edges, int n) {
    int parent[n];
    int rank[n];
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
    int vertices = n;
    while (vertices > 2) {
        int i = rand() % edges.size();
        int u = edges[i].src;
        int v = edges[i].dest;
        int setU = findParent(parent, u);
        int setV = findParent(parent, v);
        if (setU == setV) {
            continue;
        }
        merge(parent, rank, setU, setV);
        vertices--;
    }
    int cut = 0;
    for (int i = 0; i < edges.size(); i++) {
        int u = edges[i].src;
        int v = edges[i].dest;
        int setU = findParent(parent, u);
        int setV = findParent(parent, v);
        if (setU != setV) {
            cut++;
        }
    }
    return cut;
}
int main() {
    int n = 4;
    vector<Edge> edges = {{0, 1}, {0, 2}, {0, 3}, {1, 3}, {2, 3}};
    srand(time(NULL)); 
    int minCut = INT_MAX;
    for (int i = 0; i < n; i++) {
        int cut = kargerMinCut(edges, n);
        if (cut < minCut) {
            minCut = cut;
        }
    }
    cout << "Minimum cut: " << minCut << endl;
    return 0;
}



//assembly Line Schedule

#include<bits/stdc++.h>
using namespace std;
int min(int x, int y)
{
    return (x < y) ? x : y;
}
int assemblyLineSchedule(int a[][4], int t[][4], int e[], int x[])
{
    int T1[4], T2[4];
    T1[0] = e[0] + a[0][0]; 
    T2[0] = e[1] + a[1][0]; 
    for (int i = 1; i < 4; i++)
    {
        T1[i] = min(T1[i-1] + a[0][i], T2[i-1] + t[1][i-1] + a[0][i]); 
        T2[i] = min(T2[i-1] + a[1][i], T1[i-1] + t[0][i-1] + a[1][i]); 
    }
    return min(T1[3] + x[0], T2[3] + x[1]);
}
int main()
{
    int a[][4] = {{7, 9, 3, 4}, {8, 5, 6, 4}}; 
    int t[][4] = {{2, 3, 1}, {2, 1, 2}}; 
    int e[] = {2, 4}; 
    int x[] = {3, 2};
    cout << "Minimum time taken to exit the assembly line: " << assemblyLineSchedule(a, t, e, x) << endl;
    return 0;
}


//largest multiplcation 

#include<bits/stdc++.h>
using namespace std;
int max(int x, int y)
{
    return (x > y) ? x : y;
}
int numDigits(int x)
{
    int digits = 0;
    while (x > 0)
    {
        digits++;
        x /= 10;
    }
    return digits;
}
int karatsuba(int x, int y)
{
    if (x < 10 || y < 10)
        return x * y;
    int n = max(numDigits(x), numDigits(y));
    int m = (n + 1) / 2;
    int a = x / (int)pow(10, m);
    int b = x % (int)pow(10, m);
    int c = y / (int)pow(10, m);
    int d = y % (int)pow(10, m);
    int ac = karatsuba(a, c);
    int bd = karatsuba(b, d);
    int ad_bc = karatsuba(a + b, c + d) - ac - bd;
    return ac * (int)pow(10, 2 * m) + ad_bc * (int)pow(10, m) + bd;
}
int main()
{
    int x = 1234;
    int y = 5678;
    int prod = karatsuba(x, y);
    cout << "Product of " << x << " and " << y << " is " << prod << endl;
    return 0;
}
